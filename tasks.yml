---

 - description:
     As a user I want to see the movie overview list on the application's
     <em>landing page</em>
   acceptanceCriteria:
     The landing page should continue to feature the
     <em>Welcome to...</em> message and should not contain the
     <em>Add Movie</em> button.
   hints:
     This story can be resolved by rearranging code. See how the movie form
     is reused as part of the <em>add movie</em> and <em>edit movie</em>
     pages.

 - description:
     As a user I want to see the movies sorted by name (ascending).
   acceptanceCriteria:
     Movies should be sorted like this on the landing page and on the
     movie overview page.
   hints:
     AngularJS has an
     <a href="http://docs.angularjs.org/api/ng.filter:orderBy">
       <em>orderBy</em> filter
     </a>
     which can be used in the HTML templates.

 - description:
     As a user I want to be able to change the sorting order of movies.
   acceptanceCriteria:
     Sorting should be toggled between ascending and descending by
     clicking on the column header <em>Title</em>.
     Functionality should be available on the landing page and on the
     movie overview page.
   hints:
     The AngularJS <em>orderBy</em> filter can reverse the sorting order.

 - description:
     As a user I want active tab in the top-navigation to be highlighted.
   acceptanceCriteria:
     Currently, the "Home" tab is always highlighted. When I click on the "Movies" tab,
     I want this tab to be highlighted instead.
   hints:
     We have no idea, how this can be accomplished. We are curious, what you come up with...

 - description:
     As a user I want to be able to open the <em>add movie</em> page in a new tab
     using web browsers' standard mechanisms, i.e. CTRL / CMD click, right
     click open in new tab etc..
   hints:
     Take a look at the difference between the links to the movie detail
     pages and the add movie button.

 - description:
     As a user I want to be able to define movies' release years.
   acceptanceCriteria:
     The <em>add movie</em> and <em>edit movie</em> page should both contain
     a new form-field, where the user can enter the release year. The release-year
     should be displayed on both the overview (list) page and the detail page.
     When the release year is empty, a placeholder text (like "unknown") should be displayed.
   hints:
     There is no explicit definition of the data-model. To extend the data-model by adding
     a new attribute, you simply have to pass the additional attribute to the server. The
     server will persist any attributes, it receives. Moreover, any attributes, that are 
     stored in the database will automatically be part of the server-responses for GET requests.

 - description:
     As a user I want to be able to sort movies either by
     movie title or release year.
   acceptanceCriteria:
     See task 2 and 3 for details.

 - description:
    As a user I want to be able to tell my friends about movies through a
    Twitter integration.
   hints:
    Twitter provides
    <a href="https://twitter.com/about/resources/buttons">
     a few buttons
    </a>
    that are simple to integrate.

 - description:
    As a user I want to apply rich formatting options to
    movie's descriptions.
   hints:
    <a href="http://textangular.com/">textAngular</a> and other
    Angular-wrapped libraries may be helpful.
   acceptanceCriteria:
    The formatting options must not require knowledge about HTML.
    Markdown and rich text editing are acceptable.

 - description:
     As a user I want to search for movies.
   hints:
     Is is acceptable to implement the search logic on the client side. Check
     out Angular's
     <a href="https://code.angularjs.org/1.2.26/docs/api/ng/filter/filter">
       filter
     </a> filter.
   acceptanceCriteria:
     There should only be one search field which searches in the
     movies' titles and descriptions at the same time. Searching
     should be case insensitive.

 - description:
     As a user I want my input to be validated when creating movies.
   acceptanceCriteria:
     Movies need a title and a release year. The release-year must consist of 4 digits and
     must be greater than 1900. <strong>The validation should be implemented on client-side</strong>. No
     communication with the server should happen for invalid data.
   hints:
     A very simple way to add validation on the client side is to use the
     <a href="http://docs.angularjs.org/api/ng.directive:ngChange">
       AngularJS ngChange directive</a>.

 - description:
     As a user I want to be able to create actors. Each actor has a name
     and a short biography.
   hints:
     The API for storing and retrieving actors is already implemented on the server side, it
     is just not used by the client. Take a look at the implementation
     of the movie feature to get some inspiration.

 - description:
     As a user I want to be able to see a list of actors.

 - description:
     As a user I want to connect actors and movies.
   acceptanceCriteria:
     A simple multi select box on the create actor form suffices. Connected
     actors should be shown on the movie detail page.
   hints:
       
 - description:
     As a user I want to remove actors from a movie.
   hints: 
     

 - description:
     As a user I want to search for actors.
   hints:
     It is acceptable to implement the search logic on the client side.
     Check out Angular's
     <a href="https://code.angularjs.org/1.2.26/docs/api/ng/filter/filter">
      filter
      </a> filter.
   acceptanceCriteria:
     There should only be one search field which searches in all
     the actors' properties at the same time. Searching
     should be case insensitive.
